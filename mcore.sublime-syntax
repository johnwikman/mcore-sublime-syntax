%YAML 1.2
---
name: MCore
file_extensions:
  - mc
scope: source.mcore

variables:
  builtin_ident: 'unit|not|and|or|addi|subi|muli|divi|modi|negi|lti|leqi|gti|geqi|eqi|neqi|slli|srli|srai|arity|addf|subf|mulf|divf|negf|ltf|leqf|gtf|geqf|eqf|neqf|char2int|int2char|makeseq|length|concat|nth|cons|slice|reverse|print|dprint|argv|readFile|writeFile|fileExists|deleteFile|error|floorfi|ceilfi|roundfi'
  reserved_ident: 'if|then|else|let|match|with|lang|con|use|in|case|utest|lam'
  ident: '[a-zA-Z_][a-zA-Z_0-9]*'
  escapechar: '\\([?abfnrtv"\\]|'')'

# Context parsing
contexts:
  main:
    - include: mlangs
    - include: mexprs

  mlangs:
    - include: comment
    - include: lang

  mexprs:
    - include: comment
    - include: mexpr

  mexpr:
    - include: let
    - include: ifexpr
    - include: matchexpr
    - include: fix
    - include: lam
    - include: use
    - include: con
    - include: utest
    - include: includeexpr
    - include: constant
    - include: parenthesis
    - include: identifier

  mexpr-pushed:
    - include: let-pushed
    - include: ifexpr-pushed
    - include: matchexpr-pushed
    - include: fix-pushed
    - include: lam-pushed
    - include: con-pushed
    - include: use-pushed
    - include: utest-pushed
    - include: includeexpr-pushed
    - include: constant-pushed
    - include: parenthesis-pushed
    - include: identifier-pushed

  constant:
    - include: float
    - include: integer
    - include: boolean
    - include: string
    - include: character
    - include: unit-constant

  constant-pushed:
    - include: float-pushed
    - include: integer-pushed
    - include: boolean-pushed
    - include: string-pushed
    - include: character-pushed
    - include: unit-constant-pushed

  # Comments
  comment:
    - match: '(--|//)'
      scope: comment.line.mcore
      push:
        - match: '\n'
          scope: comment.line.mcore
          pop: true
        - include: comment-line-content

  comment-line-content:
    - match: '\s*([Tt][Oo][Dd][Oo])(:)?'
      scope: comment.keyword.todo.mcore
    - match: '.*'
      scope: comment.line.mcore

  # Lang statements
  lang:
    - match: '\b(lang)\b'
      scope: keyword.other.lang.mcore
      push: [lang-init, identifier-pushed]

  lang-pushed:
    - match: '\b(lang)\b'
      scope: keyword.other.lang.mcore
      set: [lang-init, identifier-pushed]

  lang-init:
    # Check what comes after 'lang'
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [lang-eqexpr, identifier-pushed]
    - match: '\b(syn)\b'
      scope: keyword.directive.syn.mcore
      set: [lang-syninit, identifier-pushed]
    - match: '\b(sem)\b'
      scope: keyword.directive.sem.mcore
      set: [lang-seminit, identifier-pushed]
    - match: '\b(end)\b'
      scope: keyword.directive.end.mcore
      pop: true
    - include: comment
    - include: lang-pushed
    - include: mexpr-pushed

  lang-eqexpr:
      # lang X = ...
    - match: '(\+)'
      scope: keyword.operator.combine.mcore
      set: [lang-eqexpr, identifier-pushed]
    - match: '\b(syn)\b'
      scope: keyword.directive.syn.mcore
      set: [lang-syninit, identifier-pushed]
    - match: '\b(sem)\b'
      scope: keyword.directive.sem.mcore
      set: [lang-seminit, identifier-pushed]
    - match: '\b(end)\b'
      scope: keyword.directive.end.mcore
      pop: true
    - include: comment
    - include: lang-pushed
    - include: mexpr-pushed

  lang-syninit:
      # syn X = ...
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [lang-synbody]
    - match: '\b(syn)\b'
      scope: keyword.directive.syn.mcore
      set: [lang-syninit, identifier-pushed]
    - match: '\b(sem)\b'
      scope: keyword.directive.sem.mcore
      set: [lang-seminit, identifier-pushed]
    - include: comment
    - include: identifier
  lang-synbody:
    - match: '(\|)'
      scope: keyword.operator.case.mcore
      set: [lang-synbody]
    - match: '\b(syn)\b'
      scope: keyword.directive.syn.mcore
      set: [lang-syninit, identifier-pushed]
    - match: '\b(sem)\b'
      scope: keyword.directive.sem.mcore
      set: [lang-seminit, identifier-pushed]
    - match: '\b(end)\b'
      scope: keyword.directive.end.mcore
      pop: true
    - include: comment
    - include: identifier

  lang-seminit:
      # sem X (x : T) = ...
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [lang-sembody]
    - include: comment
  lang-sembody:
    - match: '(\|)'
      scope: keyword.operator.case.mcore
      set: [lang-sembody-continued, lang-semarrow-pushed]
    - match: '\b(syn)\b'
      scope: keyword.directive.syn.mcore
      set: [lang-syninit, identifier-pushed]
    - match: '\b(sem)\b'
      scope: keyword.directive.sem.mcore
      set: [lang-seminit, identifier-pushed]
    - match: '\b(end)\b'
      scope: keyword.directive.end.mcore
      pop: true
    - include: comment

  lang-sembody-continued:
    - match: '(\|)'
      scope: keyword.operator.case.mcore
      set: [lang-sembody-continued, lang-semarrow-pushed]
    - match: '\b(syn)\b'
      scope: keyword.directive.syn.mcore
      set: [lang-syninit, identifier-pushed]
    - match: '\b(sem)\b'
      scope: keyword.directive.sem.mcore
      set: [lang-seminit, identifier-pushed]
    - match: '\b(end)\b'
      scope: keyword.directive.end.mcore
      pop: true
    - include: mexprs

  lang-semarrow-pushed:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      pop: true
    - include: comment

  ## LET-EXPRESSION ##
  let:
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      push: [let-in-pushed, op-assignment-pushed, identifier-pushed]

  let-pushed:
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [let-in-pushed, op-assignment-pushed, identifier-pushed]
    - include: comment

  let-in-pushed:
    - match: '\b(in)\b'
      scope: keyword.directive.in.mcore
      pop: true
    - include: mexprs

  ## FIX-EXPRESSION ##
  fix:
    - match: '\b(fix)\b'
      scope: keyword.control.fix.mcore

  fix-pushed:
    - match: '\b(fix)\b'
      scope: keyword.control.fix.mcore
    - include: comment

  ## CON-EXPRESSION ##
  con:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      push: [con-in-pushed, identifier-pushed]

  con-pushed:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [con-in-pushed, identifier-pushed]
    - include: comment

  con-in-pushed:
    - match: '\b(in)\b'
      scope: keyword.directive.in.mcore
      pop: true
    - include: comment

  ## USE-EXPRESSION ##
  use:
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      push: [use-in-pushed, identifier-pushed]

  use-pushed:
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [use-in-pushed, identifier-pushed]
    - include: comment

  use-in-pushed:
    - match: '\b(in)\b'
      scope: keyword.directive.in.mcore
      pop: true
    - include: comment

  ## UTEST-EXPRESSION ##
  utest:
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      push: [utest-in-pushed, utest-with-pushed]

  utest-pushed:
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [utest-in-pushed, utest-with-pushed]
    - include: comment

  utest-with-pushed:
    - match: '\b(with)\b'
      scope: keyword.directive.with.mcore
      pop: true
    - include: mexprs

  utest-in-pushed:
    - match: '\b(in)\b'
      scope: keyword.directive.in.mcore
      pop: true
    - include: mexprs

  ## LAMBDA-EXPRESSION ##
  lam:
    - match: '\b(lam)\b'
      scope: keyword.operator.lam.mcore
      push: [lam-dot-pushed, identifier-pushed]

  lam-pushed:
    - match: '\b(lam)\b'
      scope: keyword.operator.lam.mcore
      set: [lam-dot-pushed, identifier-pushed]
    - include: comment

  lam-dot-pushed:
    - match: '[.]'
      scope: keyword.operator.lamdot.mcore
      pop: true
    - include: comment

  ## IF-THEN-ELSE-EXPRESSION ##
  ifexpr:
    - match: '\b(if)\b'
      scope: keyword.control.if.mcore
      push: [ifexpr-else-pushed, ifexpr-then-pushed]

  ifexpr-pushed:
    - match: '\b(if)\b'
      scope: keyword.control.if.mcore
      set: [ifexpr-else-pushed, ifexpr-then-pushed]
    - include: comment

  ifexpr-then-pushed:
    - match: '\b(then)\b'
      scope: keyword.control.then.mcore
      pop: true
    - include: mexprs

  ifexpr-else-pushed:
    - match: '\b(else)\b'
      scope: keyword.control.else.mcore
      pop: true
    - include: mexprs

  ## MATCH-EXPRESSION ##
  matchexpr:
    - match: '\b(match)\b'
      scope: keyword.control.match.mcore
      push: [matchexpr-else-pushed, matchexpr-then-pushed, matchexpr-with-pushed, identifier-pushed]

  matchexpr-pushed:
    - match: '\b(match)\b'
      scope: keyword.control.match.mcore
      set: [matchexpr-else-pushed, matchexpr-then-pushed, matchexpr-with-pushed, identifier-pushed]
    - include: comment

  matchexpr-with-pushed:
    - match: '\b(with)\b'
      scope: keyword.control.with.mcore
      pop: true
    - include: comment

  matchexpr-then-pushed:
    - match: '\b(then)\b'
      scope: keyword.control.then.mcore
      pop: true
    - include: mexprs

  matchexpr-else-pushed:
    - match: '\b(else)\b'
      scope: keyword.control.else.mcore
      pop: true
    - include: mexprs

  ## INCLUDE-EXPRESSION ##
  includeexpr:
    - match: '\b(include)\b'
      scope: keyword.control.include.mcore
      push: [string-pushed]

  includeexpr-pushed:
    - match: '\b(include)\b'
      scope: keyword.control.include.mcore
      set: [string-pushed]
    - include: comment

  ## IDENTIFIER-EXPRESSION ##
  identifier:
    - match: '\b({{builtin_ident}})\b'
      scope: support.function.builtin.ident.mcore
    - match: '\b({{reserved_ident}})\b'
      scope: invalid.illegal.reserved.ident.mcore
    - match: '\b(_)\b'
      scope: keyword.other.ignored.ident.mcore
    - match: '\b{{ident}}\b'
      scope: other.ident.mcore

  identifier-pushed:
    - match: '\b({{builtin_ident}})\b'
      scope: support.function.builtin.ident.mcore
      pop: true
    - match: '\b({{reserved_ident}})\b'
      scope: invalid.illegal.reserved.ident.mcore
      pop: true
    - match: '\b(_)\b'
      scope: keyword.other.ignored.ident.mcore
      pop: true
    - match: '\b{{ident}}\b'
      scope: other.ident.mcore
      pop: true
    - include: comment

  ## PARENTHESIS-EXPRESSIONS ##
  parenthesis:
    - include: lparen
    - include: rparen-illegal

  parenthesis-pushed:
    - include: lparen
    - include: rparen-illegal

  lparen:
    - match: '\('
      scope: symbol.lparen.mcore
      push: [rparen-pushed]

  rparen-illegal:
    - match: '\)'
      scope: invalid.illegal.rparen.mcore

  lparen-pushed:
    - match: '\('
      scope: symbol.lparen.mcore
      set: [rparen-pushed]
    - include: comment

  rparen-illegal-pushed:
    - match: '\)'
      scope: invalid.illegal.rparen.mcore
      pop: true
    - include: comment

  rparen-pushed:
    - match: '\)'
      scope: symbol.rparen.mcore
      pop: true
    - include: mexprs

  ## CONSTANT-EXPRESSIONS ##
  integer:
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore

  integer-pushed:
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      pop: true
    - include: comment

  float:
    - match: '(-)?[0-9]([.][0-9]+)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
    - match: '(-)?[0-9][.][0-9]+'
      scope: constant.numeric.float.normal.mcore

  float-pushed:
    - match: '(-)?[0-9]([.][0-9]+)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      pop: true
    - match: '(-)?[0-9][.][0-9]+'
      scope: constant.numeric.float.normal.mcore
      pop: true
    - include: comment

  boolean:
    - match: '(true|false)'
      scope: constant.language.mcore

  boolean-pushed:
    - match: '(true|false)'
      scope: constant.language.mcore
      pop: true
    - include: comment

  unit-constant:
    - match: '[(][)]'
      scope: constant.language.mcore

  unit-constant-pushed:
    - match: '[(][)]'
      scope: constant.language.mcore
      pop: true
    - include: comment

  string:
    - match: '(")'
      scope: string.quote.double.mcore
      push:
        - match: '(")'
          scope: string.quote.double.mcore
          pop: true
        - include: stringsymbol

  string-pushed:
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          pop: true
        - include: stringsymbol
    - include: comment

  stringsymbol:
    - match: '{{escapechar}}'
      scope: constant.character.escape.mcore
    - match: '[^"\\]'
      scope: string.character.mcore

  character:
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: constant.character.escape.mcore
        4: string.quote.single.mcore
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore

  ## OPERATOR-EXPRESSIONS ##
  op-assignment-pushed:
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      pop: true
    - include: comment
